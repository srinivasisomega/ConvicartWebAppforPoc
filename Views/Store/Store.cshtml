@model List<ConvicartWebApp.Models.Store>
<style>
    /* Global styles */
    * {
        box-sizing: border-box; /* Include padding in element's total width */
    }
    .Plusminus {
        
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
        background-color: #d9d9d9;
        border-radius: 20px;
        padding: 5px 10px;
        font-size: 20px;
        font-weight: bold;
        color: #333;
    }

        .Plusminus h6 {
            margin-left: 5px;
            margin-right: 5px;
            margin-bottom: 0px;
        }

        .Plusminus button {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 20px;
            font-weight: bold;
            color: #333;
        }
    main {
        display: flex;
        flex-direction: row;
        min-width: 1200px; /* Adjust as needed for your layout */
        margin: 0 10px 10px; /* Center the main content */
        padding: 20px; /* Optional padding */
    }

    /* Sidebar styles */
    .sidebar {
        width: fit-content;
        height: fit-content;
        background-color: #fff;
        padding: 15px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
    }

        .sidebar h2 {
            font-size: 18px;
            margin-bottom: 10px;
        }

        .sidebar form {
            margin-bottom: 20px;
        }

    /* Store items section */
    .store-items {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        flex-grow: 1;
        margin-left: 20px;
        width: 100%; /* Changed from stretch to 100% */
    }

    .filter-bar form {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .search-bar {
        width: 60%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .filter-bar select {
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: white;
    }

    .item-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        grid-auto-rows: auto;/* 3 items per row */
        gap: 20px;
    }

    /* Item card styles */
    .item-card {
        width: 261px;
        background-color: #fff;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        text-align: center;
        position: relative;
    }

    .Cart-switch {
        display: none;
        background-color: darkgoldenrod;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 5px 5px;
        cursor: pointer;
        position: absolute;
        bottom: 10px;
        left: 50%;
        transform: translateX(-50%);
        font-size: 12px;
    }

    .item-card:hover .Cart-switch {
        display: block;
    }
    .Cart-switch .Plusminus{
        display:none;
        flex-direction:row;
    }
    .Cart-switch .Original-add-tocart{
        display:block;
    }
    .Cart-switch .Original-add-tocart:click
    .cart-count {
        margin-left: 5px;
        background-color: #fff;
        border-radius: 12px;
        padding: 3px 6px;
        font-size: 14px;
        display: inline-block;
    }

    .item-card img {
        width: 100px;
        height: 100px;
        border-radius: 8px;
        margin-bottom: 10px;
    }

    .item-card h3 {
        font-size: 20px;
        margin-bottom: 5px;
        color: #333;
    }

    .item-card p {
        font-size: 16px;
        color: #888;
    }

    .rating {
        margin-top: 10px;
        font-size: 14px;
        color: #ffcc00;
    }

    .star {
        font-size: 16px;
        color: #ffcc00;
    }

    .pagination {
        margin-right:40%;
        text-align: center;
        margin-top: 20px;
    }

    .page-link {
        display: inline-block;
        padding: 10px 15px;
        margin: 0 5px;
        border: 1px solid #ddd;
        background-color: #f7f7f7;
        color: #333;
        text-decoration: none;
        border-radius: 5px;
    }

        .page-link.active {
            background-color: #333;
            color: #fff;
        }
</style>
<main>
    <!-- Sidebar for filters -->
    <div class="sidebar">
        <form method="get" action="@Url.Action("Store")">
                <!-- Difficulty Filter -->
                <h4>Difficulty</h4>
                <label><input type="checkbox" name="difficulty" value="Easy" @(ViewBag.Difficulty?.Contains("Easy") == true ? "checked" : "")> Easy</label><br>
                <label><input type="checkbox" name="difficulty" value="Medium" @(ViewBag.Difficulty?.Contains("Medium") == true ? "checked" : "")> Medium</label><br>
                <label><input type="checkbox" name="difficulty" value="Hard" @(ViewBag.Difficulty?.Contains("Hard") == true ? "checked" : "")> Hard</label><br>

                <h4>Cook Time (in minutes)</h4>
                <input type="range" name="cookTimeMin" min="0" max="120" value="@ViewBag.CookTimeMin ?? 0" id="cookTimeMin">
                <label for="cookTimeMin">Min</label>
                <span id="minCookTimeValue">@ViewBag.CookTimeMin </span><br>

                <input type="range" name="cookTimeMax" min="0" max="120" value="@ViewBag.CookTimeMax ?? 120" id="cookTimeMax">
                <label for="cookTimeMax">Max</label>
                <span id="maxCookTimeValue">@ViewBag.CookTimeMax </span><br>

                <!-- Point Range Filter -->
                <h4>Point Range</h4>
                <input type="range" name="minPoints" min="0" max="500" value="@ViewBag.MinPoints ?? 0" id="minPoints">
                <label for="minPoints">Min Points</label>
                <span id="minPointsValue">@ViewBag.MinPoints</span><br>

                <input type="range" name="maxPoints" min="0" max="500" value="@ViewBag.MaxPoints ?? 500" id="maxPoints">
                <label for="maxPoints">Max Points</label>
                <span id="maxPointsValue">@ViewBag.MaxPoints</span><br>
                <button type="submit">Apply Filters</button>
        </form>
    </div>

    <!-- Store items section -->
    <div class="store-items">
        <div class="filter-bar">
            <form method="get" action="@Url.Action("Store")">
                <input type="text" name="searchTerm" placeholder="Search" class="search-bar" value="@Context.Request.Query["searchTerm"]">
                <select name="sortOrder" style="margin-left:10px">
                    <option value="New" selected="@(ViewBag.SortOrder == "New")">New</option>
                    <option value="Price ascending" selected="@(ViewBag.SortOrder == "Price ascending")">Price ascending</option>
                    <option value="Price descending" selected="@(ViewBag.SortOrder == "Price descending")">Price descending</option>
                    <option value="Rating" selected="@(ViewBag.SortOrder == "Rating")">Rating</option>
                </select>
                <button type="submit" style="margin-left:10px">Filter</button>
            </form>
        </div>

        <div class="item-grid">
            @foreach (var item in Model)
            {
                <div class="item-card">
                    <a href="@Url.Action("Recipe", "Store", new { id = item.ProductId })" style="text-decoration:none; color:inherit;">
                        <img src="~/Images/store/@item.imgUrl" alt="@item.ProductName" class="item-image">
                        <h3>@item.ProductName</h3>
                        <p>@item.Price points</p>
                        <div class="rating">
                            @for (int i = 0; i < item.Rating; i++)
                            {
                                <span class="star">★</span>
                            }
                            @for (int? i = item.Rating; i < 5; i++)
                            {
                                <span class="star" style="color: #ccc">★</span>
                            }
                        </div>
                    </a>
                    <div class="Cart-switch">
                        <div class="Original-add-tocart">
                            <input type="hidden" name="productId" value="@item.ProductId" />
                            <input type="hidden" name="quantity" value="1" />
                            <button type="button" class="add-to-cart" data-product-id="@item.ProductId">Add to Cart</button>
                        </div>
                        <div class="Plusminus">
                            <input type="hidden" name="productId" value="@item.ProductId" />
                            <input type="hidden" name="quantity" value="1" />
                            <button type="button" class="add-to-cart-plus" data-product-id="@item.ProductId">+</button>
                            <h6 id="quantity-display-@item.ProductId">0</h6>
                            <button type="button" class="remove-from-cart" data-product-id="@item.ProductId">-</button>
                        </div>
                    </div>


                </div>
            }
        </div>

        <!-- Pagination controls -->
        <div class="pagination">
            @if (ViewBag.CurrentPage > 1)
            {
                <a href="@Url.Action("Store", new { page = ViewBag.CurrentPage - 1 })" class="page-link">Previous</a>
            }

            @for (int i = 1; i <= ViewBag.TotalPages; i++)
            {
                <a href="@Url.Action("Store", new { page = i })" class="page-link @(i == ViewBag.CurrentPage ? "active" : "")">@i</a>
            }

            @if (ViewBag.CurrentPage < ViewBag.TotalPages)
            {
                <a href="@Url.Action("Store", new { page = ViewBag.CurrentPage + 1 })" class="page-link">Next</a>
            }
        </div>
    </div>
</main>
<script>
    function updateCookTimeMin() {
    const minValue = document.getElementById("cookTimeMin").value;
    document.getElementById("minCookTimeValue").textContent = minValue;
}

function updateCookTimeMax() {
    const maxValue = document.getElementById("cookTimeMax").value;
    document.getElementById("maxCookTimeValue").textContent = maxValue;
}

// Function to update the displayed value for points
function updateMinPoints() {
    const minPointsValue = document.getElementById("minPoints").value;
    document.getElementById("minPointsValue").textContent = minPointsValue;
}

function updateMaxPoints() {
    const maxPointsValue = document.getElementById("maxPoints").value;
    document.getElementById("maxPointsValue").textContent = maxPointsValue;
}

// Event listeners to call the update functions on input change
document.getElementById("cookTimeMin").addEventListener("input", updateCookTimeMin);
document.getElementById("cookTimeMax").addEventListener("input", updateCookTimeMax);
document.getElementById("minPoints").addEventListener("input", updateMinPoints);
document.getElementById("maxPoints").addEventListener("input", updateMaxPoints);

document.addEventListener("DOMContentLoaded", function() {
    // Select all add to cart buttons
    const addToCartButtons = document.querySelectorAll(".Original-add-tocart .add-to-cart");
    
    // Select the original add to cart div and plusminus div
    const originalAddToCartDivs = document.querySelectorAll(".Original-add-tocart");
    const plusminusDivs = document.querySelectorAll(".Plusminus");

    addToCartButtons.forEach(function(addToCartButton, index) {
        addToCartButton.addEventListener("click", function(event) {
            event.preventDefault(); // Prevent form submission if needed

            // Hide the corresponding Original-add-tocart div
            originalAddToCartDivs[index].style.display = "none";

            // Show the corresponding Plusminus div
            plusminusDivs[index].style.display = "flex";
        });
    });
});
document.addEventListener('DOMContentLoaded', () => {
    // Handle Add to Cart button
    document.querySelectorAll('.add-to-cart').forEach(button => {
        button.addEventListener('click', function () {
            const productId = this.dataset.productId;
            addToCart(productId, 1);
        });
    });

    // Handle Remove from Cart button
    document.querySelectorAll('.remove-from-cart').forEach(button => {
        button.addEventListener('click', function () {
            const productId = this.dataset.productId;
            removeFromCart(productId, 1);
        });
    });
});

// Function to add item to cart
function addToCart(productId, quantity) {
    fetch('/Cart/AddToCart', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Requested-With': 'XMLHttpRequest' // Make it an AJAX request
        },
        body: new URLSearchParams({
            productId: productId,
            quantity: quantity
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Update UI accordingly
            const quantityDisplay = document.getElementById(`quantity-display-${productId}`);
            quantityDisplay.textContent = parseInt(quantityDisplay.textContent) + 1;
        } else {
            window.location.href = data.redirectUrl; // Redirect if not successful
        }
    });
}

// Function to remove item from cart
function removeFromCart(productId, quantity) {
    fetch('/Cart/RemoveFromCart', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Requested-With': 'XMLHttpRequest' // Make it an AJAX request
        },
        body: new URLSearchParams({
            productId: productId,
            quantity: quantity
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Update UI accordingly
            const quantityDisplay = document.getElementById(`quantity-display-${productId}`);
            const currentQuantity = parseInt(quantityDisplay.textContent);
            if (currentQuantity > 0) {
                quantityDisplay.textContent = currentQuantity - 1;
            }
            // Remove the item if quantity is 0
            if (currentQuantity <= 1) {
                // Optionally, hide the item or perform other UI updates
            }
        } else {
            window.location.href = data.redirectUrl; // Redirect if not successful
        }
    });
}

</script>


